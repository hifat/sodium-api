// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth.go

// Package mockAuthRepo is a generated GoMock package.
package mockAuthRepo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	authDomain "github.com/hifat/sodium-api/internal/domain/authDomain"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateRefreshToken mocks base method.
func (m *MockAuthService) CreateRefreshToken(ctx context.Context, req authDomain.RequestCreateRefreshToken) (*authDomain.ResponseRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", ctx, req)
	ret0, _ := ret[0].(*authDomain.ResponseRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockAuthServiceMockRecorder) CreateRefreshToken(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockAuthService)(nil).CreateRefreshToken), ctx, req)
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, req authDomain.RequestLogin, res *authDomain.ResponseRefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, req, res)
}

// Logout mocks base method.
func (m *MockAuthService) Logout(ctx context.Context, refreshTokenID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, refreshTokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceMockRecorder) Logout(ctx, refreshTokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthService)(nil).Logout), ctx, refreshTokenID)
}

// Register mocks base method.
func (m *MockAuthService) Register(ctx context.Context, req authDomain.RequestRegister, res *authDomain.ResponseRegister) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), ctx, req, res)
}

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CheckUserExists mocks base method.
func (m *MockAuthRepository) CheckUserExists(ctx context.Context, col, value string, exceptID *any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", ctx, col, value, exceptID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists.
func (mr *MockAuthRepositoryMockRecorder) CheckUserExists(ctx, col, value, exceptID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockAuthRepository)(nil).CheckUserExists), ctx, col, value, exceptID)
}

// CreateRefreshToken mocks base method.
func (m *MockAuthRepository) CreateRefreshToken(ctx context.Context, req authDomain.RequestCreateRefreshToken) (*authDomain.ResponseCreateRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", ctx, req)
	ret0, _ := ret[0].(*authDomain.ResponseCreateRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockAuthRepositoryMockRecorder) CreateRefreshToken(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockAuthRepository)(nil).CreateRefreshToken), ctx, req)
}

// GetRefreshTokenByID mocks base method.
func (m *MockAuthRepository) GetRefreshTokenByID(ctx context.Context, refreshTokenID uuid.UUID, res *authDomain.ResponseRefreshTokenClaim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenByID", ctx, refreshTokenID, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRefreshTokenByID indicates an expected call of GetRefreshTokenByID.
func (mr *MockAuthRepositoryMockRecorder) GetRefreshTokenByID(ctx, refreshTokenID, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenByID", reflect.TypeOf((*MockAuthRepository)(nil).GetRefreshTokenByID), ctx, refreshTokenID, res)
}

// Login mocks base method.
func (m *MockAuthRepository) Login(ctx context.Context, req authDomain.RequestLogin, res *authDomain.ResponseRefreshTokenRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthRepositoryMockRecorder) Login(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthRepository)(nil).Login), ctx, req, res)
}

// Logout mocks base method.
func (m *MockAuthRepository) Logout(ctx context.Context, refreshTokenID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, refreshTokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthRepositoryMockRecorder) Logout(ctx, refreshTokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthRepository)(nil).Logout), ctx, refreshTokenID)
}

// Register mocks base method.
func (m *MockAuthRepository) Register(ctx context.Context, req authDomain.RequestRegister, res *authDomain.ResponseRegister) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthRepositoryMockRecorder) Register(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthRepository)(nil).Register), ctx, req, res)
}
